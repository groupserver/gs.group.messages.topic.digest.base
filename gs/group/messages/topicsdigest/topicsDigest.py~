# coding=utf-8
from zope.component iport createObject

from Products.GSSearch.queries import DigestQuery

class TopicsDigest(object):
    """ Data object that represents the content of a topics digest. """

    def __init__(self, context, siteInfo, freqency='daily'):
        """ freqency: Defaults to 'daily'. Providing 'weekly' will turn the 
            TopicsDigest into a weekly digest. Any other value will turn the
            TopicsDigest into a daily digest."""

        self.context = context
        self.siteInfo = siteInfo
        self.freqency = 'weekly' if freqency == 'weekly' else 'daily'

        self.groupInfo = createObject('groupserver.GroupInfo', self.context)
        self.groupTz = self.groupInfo.get_property('group_tz', 'UTC')

        self.messageQuery = DigestQuery(context)
        self.__dailyDigestQuery = self.__weeklyDigestQuery = None

    def __dailyTopics__(self):
        
        if self.__dailyDigestQuery == None:
            self.__dailyDigestQuery = \
                self.messageQuery.topics_sinse_yesterday(
                    self.siteInfo.id, [self.groupInfo.id])

        retval = self.__dailyDigestQuery
        assert type(retval) == list
        return retval

    def __weeklyTopics__(self):
        
        if self.__weeklyDigestQuery == None:
            searchTokens = createObject('groupserver.SearchTextTokens',
                self.context)
            searchTokens.set_search_text(u'')
            self.__weeklyDigestQuery = \
                self.messageQuery.topic_search_keyword(searchTokens,
                    self.siteInfo.id, [self.groupInfo.id], limit=7,
                    offset=0, use_cache=True)

        retval = self.__weeklyDigestQuery
        assert type(retval) == list
        return retval


    @property
    def post_stats(self):

    @property
    def topics(self):
        """ Provides a list of the topics that are displayed in a digest.
            Contents are dependent on the TopicsDigest's frequency attribute."""
        
        if self.freqency == 'daily':
            retval = self.__dailyTopics__()
        else:
            retval = self.__weeklyTopics__()

        assert type(retval) == list
        return retval
